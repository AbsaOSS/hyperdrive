<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2018 ABSA Group Limited
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>hyperdrive_2.12</artifactId>
        <groupId>za.co.absa.hyperdrive</groupId>
        <version>4.7.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <artifactId>parent-conf_2.12</artifactId>

    <repositories>
        <!-- Used for ABRiS-->
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
        </repository>
    </repositories>

    <properties>
        <!--Enforced versions-->
        <paranamer.version>2.8</paranamer.version>

        <!--Maven-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!--Scala-->
        <scalatest.version>3.0.5</scalatest.version>
        <scalatest.maven.version>2.0.2</scalatest.maven.version>
        <specs.version>2.4.16</specs.version>
        <scalastyle.maven.version>1.0.0</scalastyle.maven.version>

        <!--Kafka-->
        <kafka.version>2.1.1</kafka.version>
        <spring.kafka.test.version>2.2.4.RELEASE</spring.kafka.test.version>
        <kafka.spark.version>0-10</kafka.spark.version>
        <testcontainers.kafka.version>1.15.1</testcontainers.kafka.version>

        <embedded.mongo.version>3.5.2</embedded.mongo.version>

        <!--Mockito-->
        <mockito.version>2.25.0</mockito.version>

        <absa.commons.version>1.0.0</absa.commons.version>
        <!--Shade Maven plug-in-->
        <maven.shade.plugin.version>3.2.1</maven.shade.plugin.version>

        <!--Surefire Maven plug-in-->
        <maven.surefire.plugin.version>3.0.0-M3</maven.surefire.plugin.version>

        <!--Configurations-->
        <commons.configuration2.version>2.7</commons.configuration2.version>
        <commons.beanutils.version>1.9.4</commons.beanutils.version>
        <aws.java.sdk.bom.version>2.18.7</aws.java.sdk.bom.version>

        <buildnumber.maven.version>1.4</buildnumber.maven.version>

        <!--Other properties-->
        <skip.docker.tests>true</skip.docker.tests>
        <jacoco.plugin.version>0.8.8</jacoco.plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thoughtworks.paranamer</groupId>
            <artifactId>paranamer</artifactId>
        </dependency>
        <!--END Enforced dependency versions-->

        <!--Spark-->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.compat.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.compat.version}</artifactId>
        </dependency>

        <!--Configurations-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-configuration2</artifactId>
        </dependency>

        <!--Tests-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

        <dependency>
            <groupId>za.co.absa.commons</groupId>
            <artifactId>commons_${scala.compat.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>

        <dependencies>
            <!--Enforced dependency versions-->
            <dependency>
                <groupId>com.thoughtworks.paranamer</groupId>
                <artifactId>paranamer</artifactId>
                <version>${paranamer.version}</version>
            </dependency>

            <!--END Enforced dependency versions-->

            <!--ABRiS-->
            <dependency>
                <groupId>za.co.absa</groupId>
                <artifactId>abris_${scala.compat.version}</artifactId>
                <version>${abris.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>za.co.absa.commons</groupId>
                        <artifactId>commons_${scala.compat.version}</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-beanutils</groupId>
                        <artifactId>commons-beanutils</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-beanutils</groupId>
                        <artifactId>commons-beanutils-core</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.apache.spark</groupId>
                        <artifactId>spark-core_${scala.compat.version}</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.apache.spark</groupId>
                        <artifactId>spark-sql_${scala.compat.version}</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!--Spark-->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
                <scope>provided</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-text</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!--Kafka-->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql-kafka-${kafka.spark.version}_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.hadoop</groupId>
                        <artifactId>hadoop-client-runtime</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- MongoDb Spark connector -->
            <dependency>
                <groupId>org.mongodb.spark</groupId>
                <artifactId>mongo-spark-connector_${scala.compat.version}</artifactId>
                <version>${spark.sql.mongo.version}</version>
            </dependency>

            <!-- MongoDB driver -->
            <dependency>
                <groupId>org.mongodb.scala</groupId>
                <artifactId>mongo-scala-driver_${scala.compat.version}</artifactId>
                <version>${mongodb.driver.version}</version>
            </dependency>

            <!--Configurations-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-configuration2</artifactId>
                <version>${commons.configuration2.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>${commons.beanutils.version}</version>
            </dependency>
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws.java.sdk.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--Tests-->
            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.compat.version}</artifactId>
                <version>${scalatest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>za.co.absa.commons</groupId>
                <artifactId>commons_${scala.compat.version}</artifactId>
                <version>${absa.commons.version}</version>
            </dependency>
            <!--Embedded Mongo for testing-->
            <dependency>
                <groupId>de.flapdoodle.embed</groupId>
                <artifactId>de.flapdoodle.embed.mongo</artifactId>
                <version>${embedded.mongo.version}</version>
            </dependency>

            <dependency>
                <!-- Cannot have scope test because it is used by abris -->
                <groupId>io.confluent</groupId>
                <artifactId>kafka-avro-serializer</artifactId>
                <version>${confluent.version}</version>
                <exclusions>
                    <exclusion>
                        <!-- Excluded because version >= 2.12.0 is required for Spark 3.2.0 -->
                        <groupId>com.fasterxml.jackson.core</groupId>
                        <artifactId>jackson-core</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <plugins>
            <!-- the Maven Scala plugin will compile Scala source files -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala.maven.plugin.version}</version>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                    <addScalacArgs>-target:jvm-1.8</addScalacArgs>
                </configuration>
                <executions>
                    <execution>
                        <id>scala-compile</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>scala-test-compile</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- disable surefire -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- enable scalatest -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>${scalatest.maven.version}</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>TestSuite.txt</filereports>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <suffixes>(?&lt;!DockerTest)</suffixes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>docker-tests</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <suffixes>(?&lt;=DockerTest)</suffixes>
                            <skipTests>${skip.docker.tests}</skipTests>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.scalastyle</groupId>
                <artifactId>scalastyle-maven-plugin</artifactId>
                <version>${scalastyle.maven.version}</version>
                <configuration>
                    <verbose>false</verbose>
                    <failOnViolation>true</failOnViolation>
                    <failOnWarning>false</failOnWarning>
                    <includeTestSourceDirectory>false</includeTestSourceDirectory>
                    <sourceDirectory>${project.basedir}/src/main/scala</sourceDirectory>
                    <testSourceDirectory>${project.basedir}/src/test/scala</testSourceDirectory>
                    <configLocation>${project.basedir}/../scalastyle-config.xml</configLocation>
                    <outputFile>${project.basedir}/target/scalastyle-output.xml</outputFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>${buildnumber.maven.version}</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <shortRevisionLength>8</shortRevisionLength>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>all-tests</id>
            <properties>
                <skip.docker.tests>false</skip.docker.tests>
            </properties>
        </profile>
        <profile>
            <id>code-coverage</id>
            <properties>
                <skip.docker.tests>false</skip.docker.tests>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco.plugin.version}</version>
                        <configuration>
                            <!-- examples of class excluding -->
                            <excludes>
                                <!-- exclude>za/co/absa/hyperdrive/ingestor/api/utils/ConfigUtils.class</exclude>
                                <exclude>za/co/absa/hyperdrive/ingestor/api/utils/StreamWriterUtil*</exclude -->
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>jacoco-prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>jacoco-report</id>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
